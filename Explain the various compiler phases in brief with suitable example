## ðŸ§©  Compiler Phases Explained (with Example)

A **compiler** works in multiple **phases**, each handling a specific task to transform **source code** into **machine code (or another target form)**.

---

### âœ… **Phases of a Compiler (in order):**

---

### 1. **Lexical Analysis (Scanner)**

ðŸ”¹ **Job**: Breaks source code into tokens.
ðŸ”¹ **Tool**: Lexer (can be built with tools like **Lex**)
ðŸ”¹ **Input**: Raw source code
ðŸ”¹ **Output**: Stream of tokens

ðŸ§ª **Example**
For code: `int x = 10;`
â†’ Tokens: `int`, `x`, `=`, `10`, `;`

---

### 2. **Syntax Analysis (Parser)**

ðŸ”¹ **Job**: Checks grammatical structure using context-free grammar.
ðŸ”¹ **Tool**: Parser (can be built with **YACC**)
ðŸ”¹ **Input**: Tokens
ðŸ”¹ **Output**: Parse Tree or Syntax Tree

ðŸ§ª **Example**
Verifies:

```c
if (x > 0) { x++; }
```

has proper `if`, condition, and block syntax.

---

### 3. **Semantic Analysis**

ðŸ”¹ **Job**: Ensures the meaning is correctâ€”types, declarations, etc.
ðŸ”¹ **Input**: Parse Tree
ðŸ”¹ **Output**: Annotated Syntax Tree / Symbol Table

ðŸ§ª **Example**
Checks that `x` is declared before use, or that youâ€™re not assigning a `float` to a `char`.

---

### 4. **Intermediate Code Generation**

ðŸ”¹ **Job**: Converts code into a platform-independent intermediate representation.
ðŸ”¹ **Output**: Intermediate Code (e.g., Three Address Code, Bytecode)

ðŸ§ª **Example**
From `a = b + c` â†’
`T1 = b + c`
`a = T1`

---

### 5. **Code Optimization**

ðŸ”¹ **Job**: Improves the intermediate code to make it **faster or smaller**.
ðŸ”¹ **Output**: Optimized Intermediate Code

ðŸ§ª **Example**
If `x = 2 * 3;` â†’ Optimize to `x = 6;`

---

### 6. **Target Code Generation**

ðŸ”¹ **Job**: Converts optimized code to **machine code** or **assembly**.
ðŸ”¹ **Output**: Target code (object code or binary)

ðŸ§ª **Example**
Generates x86 assembly or binary instructions from intermediate code.

---

### 7. **Code Linking & Assembly (Optional)**

ðŸ”¹ **Job**: Combines all object files, libraries, and resolves addresses.
ðŸ”¹ **Output**: Final Executable Program

ðŸ§ª **Example**
Combines your code with `stdio.h` functions like `printf`.

---

## ðŸ§  **Visual Summary:**

```
Source Code
   â†“
Lexical Analysis â†’ Tokens
   â†“
Syntax Analysis â†’ Parse Tree
   â†“
Semantic Analysis â†’ Annotated Tree + Symbol Table
   â†“
Intermediate Code Generation â†’ IR (Intermediate Representation)
   â†“
Optimization â†’ Optimized IR
   â†“
Target Code Generation â†’ Machine Code
   â†“
Linker & Assembler â†’ Executable File
```

---


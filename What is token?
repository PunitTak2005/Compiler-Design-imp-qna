## ðŸ§©  What is a Token?

---

### ðŸ“˜ **Definition:**

> A **token** is the **smallest meaningful unit** in a programming language, identified during the **lexical analysis** phase of compilation.

Tokens are produced by the **lexical analyzer (lexer)** and sent to the **syntax analyzer (parser)**.

---

### ðŸ§± **In Simple Words:**

> A **token** is like a "word" in a programming language â€” something that carries meaning (like a keyword, identifier, or symbol).

---

### ðŸ”– **Types of Tokens:**

| Token Type     | Description                         | Example                 |
| -------------- | ----------------------------------- | ----------------------- |
| **Keyword**    | Reserved words of the language      | `if`, `while`, `return` |
| **Identifier** | Names given to variables/functions  | `x`, `sum`, `count`     |
| **Operator**   | Symbols for operations              | `+`, `-`, `*`, `=`      |
| **Literal**    | Constant values                     | `10`, `'A'`, `3.14`     |
| **Separator**  | Punctuation used to separate tokens | `;`, `,`, `()`          |

---

### ðŸ”„ **Example:**

For this line of code:

```c
int x = 10 + y;
```

The tokens are:

* `int` â†’ Keyword
* `x` â†’ Identifier
* `=` â†’ Operator
* `10` â†’ Literal
* `+` â†’ Operator
* `y` â†’ Identifier
* `;` â†’ Separator

---

### ðŸŽ¯ **Purpose of Tokens:**

* They help the parser understand **structure and meaning**.
* Makes analysis and translation **easier and modular**.

---

Let me know if you'd like a diagram showing the tokenization process!
